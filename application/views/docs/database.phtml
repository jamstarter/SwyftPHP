<a href='/docs'>Back to Documentation</a>
<h1>Interacting with your Database</h1>
<p>Database interaction is simple with Swyft_DB! Follow the instructions below to get started!
<h2>Understanding Your Models</h2>
It's generally good practice to have one model for each database table in your database. Models are located in <b>/application/models</b>. To create a model, use the
following as a template:<br><br>
/application/models/Users.php
<xmp>
class Users extends Swyft_DB{

	protected $_name = 'users';
	
	public function getUser($id){
		$this->select()
			->from($this->_name)
			->where("id=$id");
		return $this->fetchObject();
	}
	
}
</xmp>
</p>
<p>The function <b>getUser()</b> above can be used in the following ways from your controller.</b></p>
<xmp>$user = Users::getUser(3);
echo $user->username;</xmp>
<p>or</p>
<xmp>$users = new Users;
$user = $users->getUser(3);
echo $user->username;</xmp>

<h1>Select Queries</h1>
<p>To build a query, you can either chain functions together:
<xmp>$this->select()->from('users')->where('id=3');
$result = $this->fetchObject();
</xmp><br>
or separate each part for inclusion in a conditional statement:
<xmp>$this->select();
$this->from('users');
if($id){
	$this->where('id=3');
}
$result = $this->fetchObject();
</xmp><br>
You can also have several where statements
<xmp>$this->select()->from('users')->where('id=3')->where('active=1');
$result = $this->fetchObject();
</xmp>
<br>
When fetching data, you can use the following methods to retrieve your data:
<ul>
	<li><b>fetchObject()</b> - fetch a PHP Object of all of your data</li>
	<li><b>fetchArray()</b> - fetch a PHP array of all of your data</li>
	<li><b>fetchRow()</b> - fetch a PHP Object of a single row of data</li>
</ul>
</p>

<h1>Insert Statements</h1>
<p>To insert data into a table, you need to build an array and then pass the data into the insert function:</p>
<xmp>//Build Data Array
$data = array();
$data['username'] = "John";
$data['password'] = "3456345";

//Insert record into DB
$last_id = $this->insert($data);
</xmp>
<p>The query will run and return the unique id of the last record inserted.
</p>
<h1>Update Statements</h1>
<p>To update data in a table, you need to build an array and then pass the data into the update function:</p>
<xmp>//Build Data Array
$data = array();
$data['username'] = "John";
$data['password'] = "3456345";

//Set where clause for update
$where = "id='3'";

//Update record in DB
$this->update($data,$where);
</xmp>

<h1>Delete Queries</h1>
<p>Use the following structure to delete records from the database.</p>
<xmp>$this->delete()->from('users')->where("email='john@doe.com'");
$this->runQuery();
</xmp>

<h1>Order By</h1>
<p>Use the following to order your query results.</p>
<xmp>$this->select()->from('users')->order('id DESC');
$this->fetchObject();
</xmp>

<h1>Limits</h1>
<p>Use the following to limit your query results.</p>
<xmp>$this->select()->from('users')->limit(100);
$this->fetchObject();
</xmp>


<h1>Creating Database Tables</h1>
<p>You can create database tables by defining columns and then running the createTable() function, all fields default to varchar(255) if data type is not explicitly stated.
You don't need to add an auto increment column. All tables created through Swyft_DB automatically have a unique, auto incrementing id column added by default.</p>
<xmp>$this->addColumn('username');
	->addColumn('phone','int(11)');
	->addColumn('password');
	->createTable('users');
</xmp>

<h1>Dropping Database Tables</h1>
<p>You can drop a database table using the following command that passes in the table name:</p>
<xmp>//Drop the users table
$this->dropTable('users');
</xmp>

<h1>Raw SQL Queries</h1>
<p>You can run raw SQL commands with the following. If the second parameter is true, an associative array is returned.</p>
<xmp>$sql = "SELECT * FROM users ORDER BY id DESC LIMIT 100";
$result = $this->runSQL($sql,true);
</xmp>